#!/usr/bin/env bash

# Find the absolute path of the script
# https://stackoverflow.com/a/246128/1826109
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )
SUB_COMMANDS_DIR="$SCRIPT_DIR/commands"
LIB_DIR="$SCRIPT_DIR/libs"
source "$LIB_DIR/common"


DEBUG=false
CONFIG_FILE="$HOME/.bash_env"

script_name=$(basename "$0")

function _show_help() {
  echo "Usage: $script_name [SUB-COMMAND] [OPTIONS]"
  echo "$script_name CLI tool with various sub-commands."
  echo ""
  echo "Available sub-commands:"

  # Dynamically load descriptions from sub-commands
  for script in $SUB_COMMANDS_DIR/*; do
    cmd=$(basename "$script")
    source "$script"
    if type "${cmd}_describe" &>/dev/null; then
      desc=$("${cmd}_describe")
      printf "%-20s %s\n" "$cmd" "$desc"
    fi
  done
  
  echo ""
  echo "Run '$script_name [SUB-COMMAND] --help' for more information on a specific sub-command."
}

function _check_config() {
  if [[ ! -f "$CONFIG_FILE" ]]; then
    echo "Error: Config file not found at $CONFIG_FILE"
    exit 1
  fi
}


# Dispatcher function
function _dispatch() {
  local cmd=$1
  # Remove the sub-command from arguments
  shift

  # Check if the sub-command script exists
  if [[ -f "$SUB_COMMANDS_DIR/$cmd" ]]; then
    source "$SUB_COMMANDS_DIR/$cmd"
    # Assume each sub-command has a 'run' function
    "${cmd}_run" "$@"
  else
    echo "Invalid command: $cmd"
    exit 1
  fi

}


# Main execution starts here
# Only shift out the global options and leave the sub-command and its options intact.
common::log_to_file "$script_name $@"
while [[ $# -gt 0 ]]; do
  key="$1"
  
  case $key in
    -h|--help)
      _show_help
      exit 0
      ;;
    -d|--debug)
      DEBUG=true
      shift
      ;;
    -c|--config)
        CONFIG_FILE="$2"
        shift # past argument
        shift # past value
        ;;
    *)
      # Unknown option or a sub-command, break and handle it downstream
      break
      ;;
  esac
done

common::load_config "$CONFIG_FILE"

# Remaining arguments are subcommand and its options
subcommand="$1"
shift  # remove the sub-command from arguments

if [[ -n "$subcommand" ]]; then
  _dispatch "$subcommand" "$@"
else
  echo "No sub-command provided. Run '$script_name --help' for usage information."
  exit 1
fi